name: Cargo Build & Test

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

# When a new job is pushed on a PR, cancel the old one.
concurrency:
  group: >
    ${{ github.event_name == 'pull_request'
        && format('pr-{0}', github.event.pull_request.number)
        || format('push-{0}', github.ref) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # build_and_test:
  #   name: Build and test
  #   runs-on: ubuntu-24.04-arm
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup rust toolchain, cache and bins
  #       uses: moonrepo/setup-rust@v1
  #       with:
  #         channel: nightly-2025-04-05
  #         cache-base: main
  #         components: rustfmt, clippy
  #     - run: cargo fmt --all --check
  #     - run: cargo clippy --all-targets --all-features --verbose
  #     - run: cargo build --all-targets --all-features --verbose
  #     - uses: noir-lang/noirup@v0.1.2
  #       with:
  #         toolchain: nightly-2025-05-28
  #     - run: cargo test --no-fail-fast --all-targets --all-features --verbose
  #     - run: cargo test --doc --all-features --verbose
  #     - run: cargo doc --workspace --all-features --no-deps --document-private-items
  #       env:
  #         RUSTDOCFLAGS: "--cfg doc_cfg -D warnings"

  # benchmark:
  #   name: Benchmark on Raspberry Pi 5
  #   runs-on: [self-hosted, rpi5]
  #   env:
  #     DIVAN_MAX_TIME: 30
  #     CODSPEED_RUNNER_MODE: walltime
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup rust toolchain, cache and cargo-codspeed binary
  #       uses: moonrepo/setup-rust@v1
  #       with:
  #         channel: nightly-2025-04-05
  #         cache-base: main
  #         cache-target: release
  #         bins: cargo-codspeed
  #     - name: Build the benchmark target(s)
  #       run: cargo codspeed build
  #     - name: Run the benchmarks
  #       uses: CodSpeedHQ/action@v3
  #       with:
  #         run: cargo codspeed run
  #         token: ${{ secrets.CODSPEED_TOKEN }}

  end-to-end:
    name: End-to-end tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain, cache and bins
        uses: moonrepo/setup-rust@v1
        with:
          channel: nightly-2025-04-05
          cache-base: main
          components: rustfmt, clippy

      - name: Build all Rust targets
        run: cargo build --all-targets --all-features --verbose

      - uses: noir-lang/noirup@v0.1.2
        with:
          toolchain: nightly-2025-05-28

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      # nargo execute is a faulty command that should be removed when toml reader is implemented
      - name: Compile and execute Nargo circuit
        working-directory: noir-examples/poseidon-rounds
        run: |
          nargo compile
          nargo execute

      # basic.gz should be changed to .toml file in the future when faulty command is removed
      - name: Generate Gnark inputs
        working-directory: noir-examples/poseidon-rounds
        run:  |
          cargo run --release --bin noir-r1cs prepare ./target/basic.json -o ./noir-proof-scheme.nps
          cargo run --release --bin noir-r1cs prove ./noir-proof-scheme.nps ./target/basic.gz -o ./noir-proof.np
          cargo run --release --bin noir-r1cs generate-gnark-inputs ./noir-proof-scheme.nps ./noir-proof.np

      - name: Upload proof artifacts
        uses: actions/upload-artifact@v4
        with:
          name: noir-artifacts
          path: |
            noir-examples/poseidon-rounds/noir-proof-scheme.nps
            noir-examples/poseidon-rounds/noir-proof.np

      - name: Keep alive log
        run: |
          while true; do
            echo "Keep alive log: $(date)"
            echo "Memory usage: $(free -h || vm_stat || top -l 1 | grep PhysMem)"
            sleep 10
          done &

      - name: Run Gnark verifier
        working-directory: gnark-whir
        run: go run .
